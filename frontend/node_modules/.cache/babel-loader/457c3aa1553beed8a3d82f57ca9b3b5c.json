{"ast":null,"code":"const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Use a lookup table to find the index.\n\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\n\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\n\nexport const encode = arraybuffer => {\n  let bytes = new Uint8Array(arraybuffer),\n      i,\n      len = bytes.length,\n      base64 = '';\n\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n\n  return base64;\n};\nexport const decode = base64 => {\n  let bufferLength = base64.length * 0.75,\n      len = base64.length,\n      i,\n      p = 0,\n      encoded1,\n      encoded2,\n      encoded3,\n      encoded4;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  const arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n\n  return arraybuffer;\n};","map":{"version":3,"sources":["I:/Port_Projects/eshop/frontend/node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js"],"names":["chars","lookup","Uint8Array","i","length","charCodeAt","encode","arraybuffer","bytes","len","base64","substring","decode","bufferLength","p","encoded1","encoded2","encoded3","encoded4","ArrayBuffer"],"mappings":"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","sourcesContent":["const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n"]},"metadata":{},"sourceType":"module"}