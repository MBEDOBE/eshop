{"ast":null,"code":"var _jsxFileName = \"I:\\\\Port_Projects\\\\eshop\\\\frontend\\\\src\\\\screens\\\\MapScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport LoadingBox from '../components/LoadingBox';\nimport Axios from 'axios';\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\nimport { useDispatch } from 'react-redux';\nconst libs = ['places'];\nconst defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nexport default function MapScreen(props) {\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n  const mapRef = useRef(null);\n  const placeRef = useRef(null);\n  const markerRef = useRef(null);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await Axios('/api/config/google');\n      setGoogleApiKey(data);\n      getUserCurrentLocation();\n    };\n\n    fetch();\n  }, []);\n\n  const onLoad = map => {\n    mapRef.current = map;\n  };\n\n  const onMarkerLoad = marker => {\n    markerRef.current = marker;\n  };\n\n  const onLoadPlaces = place => {\n    placeRef.current = place;\n  };\n\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng()\n    });\n  };\n\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n    setLocation({\n      lat: place.lat(),\n      lng: place.lng()\n    });\n  };\n\n  const dispatch = useDispatch();\n\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n\n    if (places && places.length === 1) {\n      // dispatch select action\n      dispatch({\n        type: USER_ADDRESS_MAP_CONFIRM,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id\n        }\n      });\n      alert('location selected successfully.');\n      props.history.push('/shipping');\n    } else {\n      alert('Please enter your address');\n    }\n  };\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation os not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  return googleApiKey ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadScript, {\n    libraries: libs,\n    googleMapsApiKey: googleApiKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"smaple-map\",\n    mapContainerStyle: {\n      height: '100%',\n      width: '100%'\n    },\n    center: center,\n    zoom: 15,\n    onLoad: onLoad,\n    onIdle: onIdle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StandaloneSearchBox, {\n    onLoad: onLoadPlaces,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-input-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"primary\",\n    onClick: onConfirm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"Confirm\"))), /*#__PURE__*/React.createElement(Marker, {\n    position: location,\n    onLoad: onMarkerLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  })))) : /*#__PURE__*/React.createElement(LoadingBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["I:/Port_Projects/eshop/frontend/src/screens/MapScreen.js"],"names":["React","useEffect","useRef","useState","LoadScript","GoogleMap","StandaloneSearchBox","Marker","LoadingBox","Axios","USER_ADDRESS_MAP_CONFIRM","useDispatch","libs","defaultLocation","lat","lng","MapScreen","props","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","fetch","data","getUserCurrentLocation","onLoad","map","current","onMarkerLoad","marker","onLoadPlaces","place","onIdle","onPlacesChanged","getPlaces","geometry","dispatch","onConfirm","places","length","type","payload","address","formatted_address","name","vicinity","googleAddressId","id","alert","history","push","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n  LoadScript,\r\n  GoogleMap,\r\n  StandaloneSearchBox,\r\n  Marker,\r\n} from '@react-google-maps/api';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport Axios from 'axios';\r\nimport { USER_ADDRESS_MAP_CONFIRM } from '../constants/userConstants';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst libs = ['places'];\r\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\r\n\r\nexport default function MapScreen(props) {\r\n  const [googleApiKey, setGoogleApiKey] = useState('');\r\n  const [center, setCenter] = useState(defaultLocation);\r\n  const [location, setLocation] = useState(center);\r\n\r\n  const mapRef = useRef(null);\r\n  const placeRef = useRef(null);\r\n  const markerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { data } = await Axios('/api/config/google');\r\n      setGoogleApiKey(data);\r\n      getUserCurrentLocation();\r\n    };\r\n    fetch();\r\n  }, []);\r\n\r\n  const onLoad = (map) => {\r\n    mapRef.current = map;\r\n  };\r\n\r\n  const onMarkerLoad = (marker) => {\r\n    markerRef.current = marker;\r\n  };\r\n  const onLoadPlaces = (place) => {\r\n    placeRef.current = place;\r\n  };\r\n  const onIdle = () => {\r\n    setLocation({\r\n      lat: mapRef.current.center.lat(),\r\n      lng: mapRef.current.center.lng(),\r\n    });\r\n  };\r\n  const onPlacesChanged = () => {\r\n    const place = placeRef.current.getPlaces()[0].geometry.location;\r\n    setCenter({ lat: place.lat(), lng: place.lng() });\r\n    setLocation({ lat: place.lat(), lng: place.lng() });\r\n  };\r\n  const dispatch = useDispatch();\r\n  const onConfirm = () => {\r\n    const places = placeRef.current.getPlaces();\r\n    if (places && places.length === 1) {\r\n      // dispatch select action\r\n      dispatch({\r\n        type: USER_ADDRESS_MAP_CONFIRM,\r\n        payload: {\r\n          lat: location.lat,\r\n          lng: location.lng,\r\n          address: places[0].formatted_address,\r\n          name: places[0].name,\r\n          vicinity: places[0].vicinity,\r\n          googleAddressId: places[0].id,\r\n        },\r\n      });\r\n      alert('location selected successfully.');\r\n      props.history.push('/shipping');\r\n    } else {\r\n      alert('Please enter your address');\r\n    }\r\n  };\r\n\r\n  const getUserCurrentLocation = () => {\r\n    if (!navigator.geolocation) {\r\n      alert('Geolocation os not supported by this browser');\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        setCenter({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n        setLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  return googleApiKey ? (\r\n    <div className=\"full-container\">\r\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\r\n        <GoogleMap\r\n          id=\"smaple-map\"\r\n          mapContainerStyle={{ height: '100%', width: '100%' }}\r\n          center={center}\r\n          zoom={15}\r\n          onLoad={onLoad}\r\n          onIdle={onIdle}\r\n        >\r\n          <StandaloneSearchBox\r\n            onLoad={onLoadPlaces}\r\n            onPlacesChanged={onPlacesChanged}\r\n          >\r\n            <div className=\"map-input-box\">\r\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\r\n              <button type=\"button\" className=\"primary\" onClick={onConfirm}>\r\n                Confirm\r\n              </button>\r\n            </div>\r\n          </StandaloneSearchBox>\r\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\r\n        </GoogleMap>\r\n      </LoadScript>\r\n    </div>\r\n  ) : (\r\n    <LoadingBox></LoadingBox>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}