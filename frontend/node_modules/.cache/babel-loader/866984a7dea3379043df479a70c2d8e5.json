{"ast":null,"code":"var _jsxFileName = \"I:\\\\Port_Projects\\\\eshop\\\\frontend\\\\src\\\\components\\\\ChatBox.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nconst ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\nexport default function ChatBox(props) {\n  const {\n    userInfo\n  } = props;\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([{\n    name: 'Admin',\n    body: 'Hello there, Please ask your question.'\n  }]);\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    if (socket) {\n      socket.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        isAdmin: userInfo.isAdmin\n      });\n      socket.on('message', data => {\n        setMessages([...messages, {\n          body: data.body,\n          name: data.name\n        }]);\n      });\n    }\n  }, [messages, isOpen, socket]);\n\n  const supportHandler = () => {\n    setIsOpen(true);\n    console.log(ENDPOINT);\n    const sk = socketIOClient(ENDPOINT);\n    setSocket(sk);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      setMessages([...messages, {\n        body: messageBody,\n        name: userInfo.name\n      }]);\n      setMessageBody('');\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          isAdmin: userInfo.isAdmin,\n          _id: userInfo._id\n        });\n      }, 1000);\n    }\n  };\n\n  const closeHandler = () => {\n    setIsOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, !isOpen ? /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: supportHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-support\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Support \"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: closeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    ref: uiMessagesRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, `${msg.name}: `), \" \", msg.body))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: messageBody,\n    onChange: e => setMessageBody(e.target.value),\n    type: \"text\",\n    placeholder: \"type message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, \"Send\")))));\n}","map":{"version":3,"sources":["I:/Port_Projects/eshop/frontend/src/components/ChatBox.js"],"names":["React","useEffect","useRef","useState","socketIOClient","ENDPOINT","window","location","host","indexOf","ChatBox","props","userInfo","socket","setSocket","uiMessagesRef","isOpen","setIsOpen","messageBody","setMessageBody","messages","setMessages","name","body","current","scrollBy","top","clientHeight","left","behavior","emit","_id","isAdmin","on","data","supportHandler","console","log","sk","submitHandler","e","preventDefault","trim","alert","setTimeout","closeHandler","map","msg","index","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nconst ENDPOINT =\r\n  window.location.host.indexOf('localhost') >= 0\r\n    ? 'http://127.0.0.1:5000'\r\n    : window.location.host;\r\n\r\nexport default function ChatBox(props) {\r\n  const { userInfo } = props;\r\n  const [socket, setSocket] = useState(null);\r\n  const uiMessagesRef = useRef(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messageBody, setMessageBody] = useState('');\r\n  const [messages, setMessages] = useState([\r\n    { name: 'Admin', body: 'Hello there, Please ask your question.' },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (uiMessagesRef.current) {\r\n      uiMessagesRef.current.scrollBy({\r\n        top: uiMessagesRef.current.clientHeight,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n    if (socket) {\r\n      socket.emit('onLogin', {\r\n        _id: userInfo._id,\r\n        name: userInfo.name,\r\n        isAdmin: userInfo.isAdmin,\r\n      });\r\n      socket.on('message', (data) => {\r\n        setMessages([...messages, { body: data.body, name: data.name }]);\r\n      });\r\n    }\r\n  }, [messages, isOpen, socket]);\r\n\r\n  const supportHandler = () => {\r\n    setIsOpen(true);\r\n    console.log(ENDPOINT);\r\n    const sk = socketIOClient(ENDPOINT);\r\n    setSocket(sk);\r\n  };\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (!messageBody.trim()) {\r\n      alert('Error. Please type message.');\r\n    } else {\r\n      setMessages([...messages, { body: messageBody, name: userInfo.name }]);\r\n      setMessageBody('');\r\n      setTimeout(() => {\r\n        socket.emit('onMessage', {\r\n          body: messageBody,\r\n          name: userInfo.name,\r\n          isAdmin: userInfo.isAdmin,\r\n          _id: userInfo._id,\r\n        });\r\n      }, 1000);\r\n    }\r\n  };\r\n  const closeHandler = () => {\r\n    setIsOpen(false);\r\n  };\r\n  return (\r\n    <div className=\"chatbox\">\r\n      {!isOpen ? (\r\n        <button type=\"button\" onClick={supportHandler}>\r\n          <i className=\"fa fa-support\" />\r\n        </button>\r\n      ) : (\r\n        <div className=\"card card-body\">\r\n          <div className=\"row\">\r\n            <strong>Support </strong>\r\n            <button type=\"button\" onClick={closeHandler}>\r\n              <i className=\"fa fa-close\" />\r\n            </button>\r\n          </div>\r\n          <ul ref={uiMessagesRef}>\r\n            {messages.map((msg, index) => (\r\n              <li key={index}>\r\n                <strong>{`${msg.name}: `}</strong> {msg.body}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div>\r\n            <form onSubmit={submitHandler} className=\"row\">\r\n              <input\r\n                value={messageBody}\r\n                onChange={(e) => setMessageBody(e.target.value)}\r\n                type=\"text\"\r\n                placeholder=\"type message\"\r\n              />\r\n              <button type=\"submit\">Send</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}